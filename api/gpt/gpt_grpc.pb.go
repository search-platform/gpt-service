// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/gpt/gpt.proto

package gpt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GptServiceClient is the client API for GptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GptServiceClient interface {
	// Sends a request to find bank information
	FindBankInformation(ctx context.Context, in *FindBankInformationRequest, opts ...grpc.CallOption) (*BankInfo, error)
}

type gptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGptServiceClient(cc grpc.ClientConnInterface) GptServiceClient {
	return &gptServiceClient{cc}
}

func (c *gptServiceClient) FindBankInformation(ctx context.Context, in *FindBankInformationRequest, opts ...grpc.CallOption) (*BankInfo, error) {
	out := new(BankInfo)
	err := c.cc.Invoke(ctx, "/api.bankinfo.GptService/FindBankInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GptServiceServer is the server API for GptService service.
// All implementations must embed UnimplementedGptServiceServer
// for forward compatibility
type GptServiceServer interface {
	// Sends a request to find bank information
	FindBankInformation(context.Context, *FindBankInformationRequest) (*BankInfo, error)
	mustEmbedUnimplementedGptServiceServer()
}

// UnimplementedGptServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGptServiceServer struct {
}

func (UnimplementedGptServiceServer) FindBankInformation(context.Context, *FindBankInformationRequest) (*BankInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBankInformation not implemented")
}
func (UnimplementedGptServiceServer) mustEmbedUnimplementedGptServiceServer() {}

// UnsafeGptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GptServiceServer will
// result in compilation errors.
type UnsafeGptServiceServer interface {
	mustEmbedUnimplementedGptServiceServer()
}

func RegisterGptServiceServer(s grpc.ServiceRegistrar, srv GptServiceServer) {
	s.RegisterService(&GptService_ServiceDesc, srv)
}

func _GptService_FindBankInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindBankInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GptServiceServer).FindBankInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.bankinfo.GptService/FindBankInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GptServiceServer).FindBankInformation(ctx, req.(*FindBankInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GptService_ServiceDesc is the grpc.ServiceDesc for GptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.bankinfo.GptService",
	HandlerType: (*GptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindBankInformation",
			Handler:    _GptService_FindBankInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gpt/gpt.proto",
}
